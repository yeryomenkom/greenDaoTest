package com.yeryomenkom.greendaotest.database.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.yeryomenkom.greendaotest.database.gen.DbLeg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_LEG".
*/
public class DbLegDao extends AbstractDao<DbLeg, Long> {

    public static final String TABLENAME = "DB_LEG";

    /**
     * Properties of entity DbLeg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Length = new Property(1, Integer.class, "length", false, "LENGTH");
        public final static Property Color = new Property(2, String.class, "color", false, "COLOR");
        public final static Property AnimalIdForLeg = new Property(3, long.class, "animalIdForLeg", false, "ANIMAL_ID_FOR_LEG");
    };

    private Query<DbLeg> dbAnimal_LegsQuery;

    public DbLegDao(DaoConfig config) {
        super(config);
    }
    
    public DbLegDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_LEG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"LENGTH\" INTEGER," + // 1: length
                "\"COLOR\" TEXT," + // 2: color
                "\"ANIMAL_ID_FOR_LEG\" INTEGER NOT NULL );"); // 3: animalIdForLeg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_LEG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbLeg entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(2, length);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(3, color);
        }
        stmt.bindLong(4, entity.getAnimalIdForLeg());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbLeg readEntity(Cursor cursor, int offset) {
        DbLeg entity = new DbLeg( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // length
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // color
            cursor.getLong(offset + 3) // animalIdForLeg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbLeg entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLength(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setColor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnimalIdForLeg(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbLeg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbLeg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "legs" to-many relationship of DbAnimal. */
    public List<DbLeg> _queryDbAnimal_Legs(long animalIdForLeg) {
        synchronized (this) {
            if (dbAnimal_LegsQuery == null) {
                QueryBuilder<DbLeg> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AnimalIdForLeg.eq(null));
                dbAnimal_LegsQuery = queryBuilder.build();
            }
        }
        Query<DbLeg> query = dbAnimal_LegsQuery.forCurrentThread();
        query.setParameter(0, animalIdForLeg);
        return query.list();
    }

}
