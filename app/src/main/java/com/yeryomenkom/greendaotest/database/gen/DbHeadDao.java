package com.yeryomenkom.greendaotest.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yeryomenkom.greendaotest.database.gen.DbHead;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_HEAD".
*/
public class DbHeadDao extends AbstractDao<DbHead, Long> {

    public static final String TABLENAME = "DB_HEAD";

    /**
     * Properties of entity DbHead.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property NumberOfEyes = new Property(1, Integer.class, "numberOfEyes", false, "NUMBER_OF_EYES");
        public final static Property Voice = new Property(2, String.class, "voice", false, "VOICE");
    };


    public DbHeadDao(DaoConfig config) {
        super(config);
    }
    
    public DbHeadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_HEAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NUMBER_OF_EYES\" INTEGER," + // 1: numberOfEyes
                "\"VOICE\" TEXT);"); // 2: voice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_HEAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbHead entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer numberOfEyes = entity.getNumberOfEyes();
        if (numberOfEyes != null) {
            stmt.bindLong(2, numberOfEyes);
        }
 
        String voice = entity.getVoice();
        if (voice != null) {
            stmt.bindString(3, voice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbHead readEntity(Cursor cursor, int offset) {
        DbHead entity = new DbHead( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // numberOfEyes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // voice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbHead entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNumberOfEyes(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setVoice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbHead entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbHead entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
