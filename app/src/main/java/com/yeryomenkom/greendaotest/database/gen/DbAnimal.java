package com.yeryomenkom.greendaotest.database.gen;

import java.util.List;
import com.yeryomenkom.greendaotest.database.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DB_ANIMAL".
 */
public class DbAnimal {

    private long id;
    private String name;
    private Integer weight;
    private long headID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbAnimalDao myDao;

    private DbHead head;
    private Long head__resolvedKey;

    private List<DbLeg> legs;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DbAnimal() {
    }

    public DbAnimal(long id) {
        this.id = id;
    }

    public DbAnimal(long id, String name, Integer weight, long headID) {
        this.id = id;
        this.name = name;
        this.weight = weight;
        this.headID = headID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbAnimalDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public long getHeadID() {
        return headID;
    }

    public void setHeadID(long headID) {
        this.headID = headID;
    }

    /** To-one relationship, resolved on first access. */
    public DbHead getHead() {
        long __key = this.headID;
        if (head__resolvedKey == null || !head__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbHeadDao targetDao = daoSession.getDbHeadDao();
            DbHead headNew = targetDao.load(__key);
            synchronized (this) {
                head = headNew;
            	head__resolvedKey = __key;
            }
        }
        return head;
    }

    public void setHead(DbHead head) {
        if (head == null) {
            throw new DaoException("To-one property 'headID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.head = head;
            headID = head.getId();
            head__resolvedKey = headID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbLeg> getLegs() {
        if (legs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbLegDao targetDao = daoSession.getDbLegDao();
            List<DbLeg> legsNew = targetDao._queryDbAnimal_Legs(id);
            synchronized (this) {
                if(legs == null) {
                    legs = legsNew;
                }
            }
        }
        return legs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLegs() {
        legs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public void setLegs(List<DbLeg> legs) {
        this.legs = legs;
    }

    // KEEP METHODS END

}
